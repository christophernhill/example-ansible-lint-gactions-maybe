#!/bin/bash
# Git pre-commit hook for Ansible linting
# This script runs all linting checks before allowing a commit

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo ""
echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}Running Pre-Commit Linting Checks${NC}"
echo -e "${BLUE}========================================${NC}"
echo ""

# Track if any checks fail
FAILED=0

# Function to print section headers
print_section() {
    echo -e "${BLUE}>>> $1${NC}"
}

# Function to print success
print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

# Function to print error
print_error() {
    echo -e "${RED}✗ $1${NC}"
}

# Function to print warning
print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

# Check if there are any staged files
if [ -z "$STAGED_FILES" ]; then
    print_warning "No staged files to check"
    exit 0
fi

# Check if required tools are installed
print_section "Checking for required tools..."

check_tool() {
    if command -v "$1" &> /dev/null; then
        print_success "$1 found"
        return 0
    else
        print_warning "$1 not found (skipping $1 checks)"
        return 1
    fi
}

ANSIBLE_LINT_AVAILABLE=false
YAMLLINT_AVAILABLE=false
SHELLCHECK_AVAILABLE=false

check_tool "ansible-lint" && ANSIBLE_LINT_AVAILABLE=true
check_tool "yamllint" && YAMLLINT_AVAILABLE=true
check_tool "shellcheck" && SHELLCHECK_AVAILABLE=true
check_tool "ansible-playbook" && ANSIBLE_AVAILABLE=true

echo ""

# Filter staged files by type
YAML_FILES=$(echo "$STAGED_FILES" | grep -E '\.(yml|yaml)$' || true)
ANSIBLE_FILES=$(echo "$YAML_FILES" | grep -E '(playbooks|roles|inventory)/' || true)
SHELL_FILES=$(echo "$STAGED_FILES" | grep -E '\.sh$' || true)
PYTHON_FILES=$(echo "$STAGED_FILES" | grep -E '\.py$' || true)

# 1. YAML Linting
if [ -n "$YAML_FILES" ] && [ "$YAMLLINT_AVAILABLE" = true ]; then
    print_section "Linting YAML files..."
    if echo "$YAML_FILES" | xargs yamllint; then
        print_success "YAML linting passed"
    else
        print_error "YAML linting failed"
        FAILED=1
    fi
    echo ""
else
    if [ -n "$YAML_FILES" ]; then
        print_warning "Skipping YAML linting (yamllint not installed)"
    fi
fi

# 2. Ansible Linting
if [ -n "$ANSIBLE_FILES" ] && [ "$ANSIBLE_LINT_AVAILABLE" = true ]; then
    print_section "Linting Ansible files..."
    if echo "$ANSIBLE_FILES" | xargs ansible-lint; then
        print_success "Ansible linting passed"
    else
        print_error "Ansible linting failed"
        FAILED=1
    fi
    echo ""
else
    if [ -n "$ANSIBLE_FILES" ]; then
        print_warning "Skipping Ansible linting (ansible-lint not installed)"
    fi
fi

# 3. Ansible Syntax Check
if [ -n "$ANSIBLE_FILES" ] && [ "$ANSIBLE_AVAILABLE" = true ]; then
    print_section "Checking Ansible playbook syntax..."
    PLAYBOOK_FILES=$(echo "$ANSIBLE_FILES" | grep -E 'playbooks/.*\.ya?ml$' || true)
    if [ -n "$PLAYBOOK_FILES" ]; then
        SYNTAX_FAILED=0
        for file in $PLAYBOOK_FILES; do
            if [ -f "$file" ]; then
                echo "  Checking: $file"
                if ansible-playbook --syntax-check "$file" > /dev/null 2>&1; then
                    print_success "  $file syntax OK"
                else
                    print_error "  $file syntax check failed"
                    SYNTAX_FAILED=1
                fi
            fi
        done
        
        if [ $SYNTAX_FAILED -eq 0 ]; then
            print_success "Ansible syntax checks passed"
        else
            print_error "Ansible syntax checks failed"
            FAILED=1
        fi
        echo ""
    fi
fi

# 4. Shell Script Linting
if [ -n "$SHELL_FILES" ] && [ "$SHELLCHECK_AVAILABLE" = true ]; then
    print_section "Linting shell scripts..."
    if echo "$SHELL_FILES" | xargs shellcheck; then
        print_success "Shell script linting passed"
    else
        print_error "Shell script linting failed"
        FAILED=1
    fi
    echo ""
else
    if [ -n "$SHELL_FILES" ]; then
        print_warning "Skipping shell script linting (shellcheck not installed)"
    fi
fi

# 5. Check for common issues
print_section "Checking for common issues..."

# Check for trailing whitespace
if echo "$STAGED_FILES" | xargs grep -n '[[:space:]]$' 2>/dev/null; then
    print_warning "Found trailing whitespace (consider removing)"
else
    print_success "No trailing whitespace found"
fi

# Check for TODO/FIXME comments in code being committed
TODOS=$(echo "$STAGED_FILES" | xargs grep -n 'TODO\|FIXME' 2>/dev/null || true)
if [ -n "$TODOS" ]; then
    print_warning "Found TODO/FIXME comments:"
    echo "$TODOS"
fi

# Check for potential secrets (very basic check)
SECRETS=$(echo "$STAGED_FILES" | xargs grep -nE '(password|secret|api_key|token).*=.*["\047][^"\047]+["\047]' 2>/dev/null || true)
if [ -n "$SECRETS" ]; then
    print_error "Potential secrets found in code:"
    echo "$SECRETS"
    echo ""
    print_error "Please use Ansible Vault for sensitive data!"
    FAILED=1
fi

echo ""

# Final result
echo -e "${BLUE}========================================${NC}"
if [ $FAILED -eq 0 ]; then
    echo -e "${GREEN}All linting checks passed! ✓${NC}"
    echo -e "${BLUE}========================================${NC}"
    echo ""
    exit 0
else
    echo -e "${RED}Linting checks failed! ✗${NC}"
    echo -e "${BLUE}========================================${NC}"
    echo ""
    echo -e "${YELLOW}To skip these checks (not recommended), use:${NC}"
    echo -e "${YELLOW}  git commit --no-verify${NC}"
    echo ""
    echo -e "${YELLOW}To fix the issues:${NC}"
    echo -e "${YELLOW}  1. Review the errors above${NC}"
    echo -e "${YELLOW}  2. Fix the issues in your files${NC}"
    echo -e "${YELLOW}  3. Stage the fixed files: git add <files>${NC}"
    echo -e "${YELLOW}  4. Try committing again${NC}"
    echo ""
    exit 1
fi

